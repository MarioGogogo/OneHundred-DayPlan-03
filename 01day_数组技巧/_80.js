/**
|--------------------------------------------------
| 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 最多出现两次 ，返回删除后数组的新长度。

不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
输入：nums = [1,1,1,2,2,3]
输出：5, nums = [1,1,2,2,3]
解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。 不需要考虑数组中超出新长度后面的元素。

输入：nums = [0,0,1,1,1,1,2,3,3]
输出：7, nums = [0,0,1,1,2,3,3]

|--------------------------------------------------
*/
//! 第一注意点 有序数组
var removeDuplicates = function (nums) {
  let len = nums.length;
  let start = 2; //要从第一个无效位置开始
  for (let i = 2; i < len; i++) {
    // 关键 start-2 无效数字 如果满足 start-2 还是等于 nums[i]就表示出现了连续3个相同数子必须删除一个
    if (nums[i] !== nums[start - 2]) {
      nums[start] = nums[i];
      start++;
    }
  }
  return start;
};

console.log('removeDuplicates', removeDuplicates([1, 1, 1, 2, 2, 3]));
